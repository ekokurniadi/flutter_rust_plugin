// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.68.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:ffi' as ffi;

abstract class FlutterRust {
  Future<String> invokeMethod({required MethodChannel channel, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInvokeMethodConstMeta;

  /// FIND LOCAL IP
  Future<LocalIP> findMyLocalIp({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFindMyLocalIpConstMeta;

  /// INIT LOGGER
  Future<void> init({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitConstMeta;

  /// CHECK BLUETOOTH IS EXIST OR NOT
  Future<bool> getBluetoothAdapterState({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBluetoothAdapterStateConstMeta;

  /// INFO : CONNECT TO DEVICE
  Future<bool> connectToBluetoothDevice(
      {required String serviceUuid, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectToBluetoothDeviceConstMeta;

  Future<bool> disconnectBluetoothDevice(
      {required String serviceUuid, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisconnectBluetoothDeviceConstMeta;

  /// INFO : WRITE BYTES TO PRINTER
  Future<bool> bluetoothWriteBytes(
      {required String serviceUuid,
      required String address,
      required Uint8List data,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBluetoothWriteBytesConstMeta;

  /// INFO : STREAM DISCOVER BLUETOOTH DEVICE
  Stream<BluetoothDevice> bluetoothStartScan(
      {required Duration timeoutSec, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBluetoothStartScanConstMeta;

  Future<void> bluetoothStopScan({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBluetoothStopScanConstMeta;

  Future<CameraScanner> scannerProcessImage(
      {required String imagePath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kScannerProcessImageConstMeta;

  Future<WindowsOSInfo> getWindowsInfo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetWindowsInfoConstMeta;
}

class BluetoothDevice {
  final String? name;
  final String? address;
  final bool status;
  final List<String> serviceUuid;

  const BluetoothDevice({
    this.name,
    this.address,
    required this.status,
    required this.serviceUuid,
  });
}

class CameraScanner {
  final String? decodeText;
  final bool status;

  const CameraScanner({
    this.decodeText,
    required this.status,
  });
}

class LocalIP {
  final String address;
  final bool isIpv4;
  final bool isIpv6;

  const LocalIP({
    required this.address,
    required this.isIpv4,
    required this.isIpv6,
  });
}

class MethodChannel {
  final String command;
  final BluetoothDevice device;
  final Uint8List? bytes;

  const MethodChannel({
    required this.command,
    required this.device,
    this.bytes,
  });
}

class WindowsOSInfo {
  final String osType;
  final String version;
  final String edition;
  final String codeName;
  final String bitness;
  final String architecture;

  const WindowsOSInfo({
    required this.osType,
    required this.version,
    required this.edition,
    required this.codeName,
    required this.bitness,
    required this.architecture,
  });
}

class FlutterRustImpl implements FlutterRust {
  final FlutterRustPlatform _platform;
  factory FlutterRustImpl(ExternalLibrary dylib) =>
      FlutterRustImpl.raw(FlutterRustPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FlutterRustImpl.wasm(FutureOr<WasmModule> module) =>
      FlutterRustImpl(module as ExternalLibrary);
  FlutterRustImpl.raw(this._platform);
  Future<String> invokeMethod({required MethodChannel channel, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_method_channel(channel);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_invoke_method(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kInvokeMethodConstMeta,
      argValues: [channel],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInvokeMethodConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "invoke_method",
        argNames: ["channel"],
      );

  Future<LocalIP> findMyLocalIp({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_find_my_local_ip(port_),
      parseSuccessData: _wire2api_local_ip,
      constMeta: kFindMyLocalIpConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFindMyLocalIpConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "find_my_local_ip",
        argNames: [],
      );

  Future<void> init({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_",
        argNames: [],
      );

  Future<bool> getBluetoothAdapterState({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_bluetooth_adapter_state(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kGetBluetoothAdapterStateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBluetoothAdapterStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_bluetooth_adapter_state",
        argNames: [],
      );

  Future<bool> connectToBluetoothDevice(
      {required String serviceUuid, dynamic hint}) {
    var arg0 = _platform.api2wire_String(serviceUuid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_connect_to_bluetooth_device(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kConnectToBluetoothDeviceConstMeta,
      argValues: [serviceUuid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectToBluetoothDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect_to_bluetooth_device",
        argNames: ["serviceUuid"],
      );

  Future<bool> disconnectBluetoothDevice(
      {required String serviceUuid, dynamic hint}) {
    var arg0 = _platform.api2wire_String(serviceUuid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disconnect_bluetooth_device(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kDisconnectBluetoothDeviceConstMeta,
      argValues: [serviceUuid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisconnectBluetoothDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disconnect_bluetooth_device",
        argNames: ["serviceUuid"],
      );

  Future<bool> bluetoothWriteBytes(
      {required String serviceUuid,
      required String address,
      required Uint8List data,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(serviceUuid);
    var arg1 = _platform.api2wire_String(address);
    var arg2 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_bluetooth_write_bytes(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kBluetoothWriteBytesConstMeta,
      argValues: [serviceUuid, address, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBluetoothWriteBytesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "bluetooth_write_bytes",
        argNames: ["serviceUuid", "address", "data"],
      );

  Stream<BluetoothDevice> bluetoothStartScan(
      {required Duration timeoutSec, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_Duration(timeoutSec);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_bluetooth_start_scan(port_, arg0),
      parseSuccessData: _wire2api_bluetooth_device,
      constMeta: kBluetoothStartScanConstMeta,
      argValues: [timeoutSec],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBluetoothStartScanConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "bluetooth_start_scan",
        argNames: ["timeoutSec"],
      );

  Future<void> bluetoothStopScan({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_bluetooth_stop_scan(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kBluetoothStopScanConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBluetoothStopScanConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "bluetooth_stop_scan",
        argNames: [],
      );

  Future<CameraScanner> scannerProcessImage(
      {required String imagePath, dynamic hint}) {
    var arg0 = _platform.api2wire_String(imagePath);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_scanner_process_image(port_, arg0),
      parseSuccessData: _wire2api_camera_scanner,
      constMeta: kScannerProcessImageConstMeta,
      argValues: [imagePath],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kScannerProcessImageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "scanner_process_image",
        argNames: ["imagePath"],
      );

  Future<WindowsOSInfo> getWindowsInfo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_windows_info(port_),
      parseSuccessData: _wire2api_windows_os_info,
      constMeta: kGetWindowsInfoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetWindowsInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_windows_info",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  BluetoothDevice _wire2api_bluetooth_device(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BluetoothDevice(
      name: _wire2api_opt_String(arr[0]),
      address: _wire2api_opt_String(arr[1]),
      status: _wire2api_bool(arr[2]),
      serviceUuid: _wire2api_StringList(arr[3]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  CameraScanner _wire2api_camera_scanner(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CameraScanner(
      decodeText: _wire2api_opt_String(arr[0]),
      status: _wire2api_bool(arr[1]),
    );
  }

  LocalIP _wire2api_local_ip(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LocalIP(
      address: _wire2api_String(arr[0]),
      isIpv4: _wire2api_bool(arr[1]),
      isIpv6: _wire2api_bool(arr[2]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  WindowsOSInfo _wire2api_windows_os_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return WindowsOSInfo(
      osType: _wire2api_String(arr[0]),
      version: _wire2api_String(arr[1]),
      edition: _wire2api_String(arr[2]),
      codeName: _wire2api_String(arr[3]),
      bitness: _wire2api_String(arr[4]),
      architecture: _wire2api_String(arr[5]),
    );
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class FlutterRustPlatform extends FlutterRustBridgeBase<FlutterRustWire> {
  FlutterRustPlatform(ffi.DynamicLibrary dylib) : super(FlutterRustWire(dylib));

// Section: api2wire

  @protected
  int api2wire_Chrono_Duration(Duration raw) {
    return api2wire_i64(raw.inMicroseconds);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_MethodChannel> api2wire_box_autoadd_method_channel(
      MethodChannel raw) {
    final ptr = inner.new_box_autoadd_method_channel_0();
    _api_fill_to_wire_method_channel(raw, ptr.ref);
    return ptr;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_uint_8_list(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_bluetooth_device(
      BluetoothDevice apiObj, wire_BluetoothDevice wireObj) {
    wireObj.name = api2wire_opt_String(apiObj.name);
    wireObj.address = api2wire_opt_String(apiObj.address);
    wireObj.status = api2wire_bool(apiObj.status);
    wireObj.service_uuid = api2wire_StringList(apiObj.serviceUuid);
  }

  void _api_fill_to_wire_box_autoadd_method_channel(
      MethodChannel apiObj, ffi.Pointer<wire_MethodChannel> wireObj) {
    _api_fill_to_wire_method_channel(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_method_channel(
      MethodChannel apiObj, wire_MethodChannel wireObj) {
    wireObj.command = api2wire_String(apiObj.command);
    _api_fill_to_wire_bluetooth_device(apiObj.device, wireObj.device);
    wireObj.bytes = api2wire_opt_uint_8_list(apiObj.bytes);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class FlutterRustWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_invoke_method(
    int port_,
    ffi.Pointer<wire_MethodChannel> channel,
  ) {
    return _wire_invoke_method(
      port_,
      channel,
    );
  }

  late final _wire_invoke_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_MethodChannel>)>>('wire_invoke_method');
  late final _wire_invoke_method = _wire_invoke_methodPtr
      .asFunction<void Function(int, ffi.Pointer<wire_MethodChannel>)>();

  void wire_find_my_local_ip(
    int port_,
  ) {
    return _wire_find_my_local_ip(
      port_,
    );
  }

  late final _wire_find_my_local_ipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_find_my_local_ip');
  late final _wire_find_my_local_ip =
      _wire_find_my_local_ipPtr.asFunction<void Function(int)>();

  void wire_init_(
    int port_,
  ) {
    return _wire_init_(
      port_,
    );
  }

  late final _wire_init_Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_init_');
  late final _wire_init_ = _wire_init_Ptr.asFunction<void Function(int)>();

  void wire_get_bluetooth_adapter_state(
    int port_,
  ) {
    return _wire_get_bluetooth_adapter_state(
      port_,
    );
  }

  late final _wire_get_bluetooth_adapter_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_bluetooth_adapter_state');
  late final _wire_get_bluetooth_adapter_state =
      _wire_get_bluetooth_adapter_statePtr.asFunction<void Function(int)>();

  void wire_connect_to_bluetooth_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> service_uuid,
  ) {
    return _wire_connect_to_bluetooth_device(
      port_,
      service_uuid,
    );
  }

  late final _wire_connect_to_bluetooth_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_connect_to_bluetooth_device');
  late final _wire_connect_to_bluetooth_device =
      _wire_connect_to_bluetooth_devicePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_disconnect_bluetooth_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> service_uuid,
  ) {
    return _wire_disconnect_bluetooth_device(
      port_,
      service_uuid,
    );
  }

  late final _wire_disconnect_bluetooth_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_disconnect_bluetooth_device');
  late final _wire_disconnect_bluetooth_device =
      _wire_disconnect_bluetooth_devicePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_bluetooth_write_bytes(
    int port_,
    ffi.Pointer<wire_uint_8_list> service_uuid,
    ffi.Pointer<wire_uint_8_list> address,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_bluetooth_write_bytes(
      port_,
      service_uuid,
      address,
      data,
    );
  }

  late final _wire_bluetooth_write_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_bluetooth_write_bytes');
  late final _wire_bluetooth_write_bytes =
      _wire_bluetooth_write_bytesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_bluetooth_start_scan(
    int port_,
    int timeout_sec,
  ) {
    return _wire_bluetooth_start_scan(
      port_,
      timeout_sec,
    );
  }

  late final _wire_bluetooth_start_scanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_bluetooth_start_scan');
  late final _wire_bluetooth_start_scan =
      _wire_bluetooth_start_scanPtr.asFunction<void Function(int, int)>();

  void wire_bluetooth_stop_scan(
    int port_,
  ) {
    return _wire_bluetooth_stop_scan(
      port_,
    );
  }

  late final _wire_bluetooth_stop_scanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_bluetooth_stop_scan');
  late final _wire_bluetooth_stop_scan =
      _wire_bluetooth_stop_scanPtr.asFunction<void Function(int)>();

  void wire_scanner_process_image(
    int port_,
    ffi.Pointer<wire_uint_8_list> image_path,
  ) {
    return _wire_scanner_process_image(
      port_,
      image_path,
    );
  }

  late final _wire_scanner_process_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_scanner_process_image');
  late final _wire_scanner_process_image = _wire_scanner_process_imagePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_windows_info(
    int port_,
  ) {
    return _wire_get_windows_info(
      port_,
    );
  }

  late final _wire_get_windows_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_windows_info');
  late final _wire_get_windows_info =
      _wire_get_windows_infoPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_MethodChannel> new_box_autoadd_method_channel_0() {
    return _new_box_autoadd_method_channel_0();
  }

  late final _new_box_autoadd_method_channel_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MethodChannel> Function()>>(
          'new_box_autoadd_method_channel_0');
  late final _new_box_autoadd_method_channel_0 =
      _new_box_autoadd_method_channel_0Ptr
          .asFunction<ffi.Pointer<wire_MethodChannel> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_BluetoothDevice extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> address;

  @ffi.Bool()
  external bool status;

  external ffi.Pointer<wire_StringList> service_uuid;
}

class wire_MethodChannel extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> command;

  external wire_BluetoothDevice device;

  external ffi.Pointer<wire_uint_8_list> bytes;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
