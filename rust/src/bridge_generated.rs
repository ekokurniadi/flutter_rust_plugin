#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.68.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_invoke_method_impl(port_: MessagePort, channel: impl Wire2Api<MethodChannel> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "invoke_method",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_channel = channel.wire2api();
            move |task_callback| Ok(invoke_method(api_channel))
        },
    )
}
fn wire_find_my_local_ip_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "find_my_local_ip",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(find_my_local_ip()),
    )
}
fn wire_init__impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(init_()),
    )
}
fn wire_get_bluetooth_adapter_state_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_bluetooth_adapter_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_bluetooth_adapter_state()),
    )
}
fn wire_connect_to_bluetooth_device_impl(
    port_: MessagePort,
    service_uuid: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connect_to_bluetooth_device",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_service_uuid = service_uuid.wire2api();
            move |task_callback| Ok(connect_to_bluetooth_device(api_service_uuid))
        },
    )
}
fn wire_disconnect_bluetooth_device_impl(
    port_: MessagePort,
    service_uuid: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disconnect_bluetooth_device",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_service_uuid = service_uuid.wire2api();
            move |task_callback| Ok(disconnect_bluetooth_device(api_service_uuid))
        },
    )
}
fn wire_bluetooth_write_bytes_impl(
    port_: MessagePort,
    service_uuid: impl Wire2Api<String> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
    data: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bluetooth_write_bytes",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_service_uuid = service_uuid.wire2api();
            let api_address = address.wire2api();
            let api_data = data.wire2api();
            move |task_callback| Ok(bluetooth_write_bytes(api_service_uuid, api_address, api_data))
        },
    )
}
fn wire_bluetooth_start_scan_impl(
    port_: MessagePort,
    timeout_sec: impl Wire2Api<chrono::Duration> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bluetooth_start_scan",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_timeout_sec = timeout_sec.wire2api();
            move |task_callback| Ok(bluetooth_start_scan(task_callback.stream_sink(), api_timeout_sec))
        },
    )
}
fn wire_bluetooth_stop_scan_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bluetooth_stop_scan",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| bluetooth_stop_scan(),
    )
}
fn wire_scanner_process_image_impl(
    port_: MessagePort,
    image_path: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "scanner_process_image",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_image_path = image_path.wire2api();
            move |task_callback| Ok(scanner_process_image(api_image_path))
        },
    )
}
fn wire_get_windows_info_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_windows_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_windows_info()),
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for BluetoothDevice {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.name.into_dart(),
            self.address.into_dart(),
            self.status.into_dart(),
            self.service_uuid.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BluetoothDevice {}

impl support::IntoDart for CameraScanner {
    fn into_dart(self) -> support::DartAbi {
        vec![self.decode_text.into_dart(), self.status.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CameraScanner {}

impl support::IntoDart for LocalIP {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.address.into_dart(),
            self.is_ipv4.into_dart(),
            self.is_ipv6.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LocalIP {}

impl support::IntoDart for WindowsOSInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.os_type.into_dart(),
            self.version.into_dart(),
            self.edition.into_dart(),
            self.code_name.into_dart(),
            self.bitness.into_dart(),
            self.architecture.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WindowsOSInfo {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
